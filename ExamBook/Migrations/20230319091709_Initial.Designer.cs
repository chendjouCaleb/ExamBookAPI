// <auto-generated />
using System;
using ExamBook.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamBook.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230319091709_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExamBook.Entities.Classroom", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("SpaceId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("ExamBook.Entities.ClassroomSpeciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("ClassroomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("SpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("ClassroomSpeciality");
                });

            modelBuilder.Entity("ExamBook.Entities.Course", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("ClassroomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Coefficient")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("SpaceId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseHour", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ClassroomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseTeacherId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time(6)");

                    b.Property<ulong?>("RoomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("RoomId");

                    b.ToTable("CourseHours");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseSession", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ClassroomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseHourId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseTeacherId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpectedEndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpectedStartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong?>("RoomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseHourId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("RoomId");

                    b.ToTable("CourseSessions");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseSpeciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ClassroomSpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomSpecialityId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseTeacher", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CourseId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("MemberId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MemberId");

                    b.ToTable("CourseTeachers");
                });

            modelBuilder.Entity("ExamBook.Entities.Examination", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("ClassroomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsLock")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("SpaceId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("ExamBook.Entities.ExaminationSpeciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("ExaminationId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Member", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("SpaceId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ExamBook.Entities.Paper", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("IndexInGroup")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("ParticipantId")
                        .HasColumnType("bigint unsigned");

                    b.Property<float?>("Score")
                        .HasColumnType("float");

                    b.Property<ulong?>("TestGroupId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TestId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("TestSpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TestGroupId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestSpecialityId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("ExamBook.Entities.PaperSpeciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong?>("PaperId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("ParticipantSpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("TestSpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("ParticipantSpecialityId");

                    b.HasIndex("TestSpecialityId");

                    b.ToTable("PaperSpeciality");
                });

            modelBuilder.Entity("ExamBook.Entities.Participant", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("ExaminationId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Index")
                        .HasColumnType("int unsigned");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedRId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<ulong?>("StudentId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ExamBook.Entities.ParticipantSpeciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("ExaminationSpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ParticipantId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationSpecialityId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ParticipantSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Room", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("Capacity")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("SpaceId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ExamBook.Entities.Space", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("CoverImageId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Youtube")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.Speciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong?>("SpaceId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Student", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("ClassroomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedRId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ExamBook.Entities.Test", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("Coefficient")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Duration")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("ExaminationId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Radical")
                        .HasColumnType("int unsigned");

                    b.Property<ulong?>("RoomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("Specialized")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("RoomId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ExamBook.Entities.TestGroup", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("Capacity")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Index")
                        .HasColumnType("int unsigned");

                    b.Property<ulong?>("RoomId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TestId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TestId");

                    b.ToTable("TestGroups");
                });

            modelBuilder.Entity("ExamBook.Entities.TestSpeciality", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedById")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong?>("ExaminationSpecialityId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TestId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationSpecialityId");

                    b.HasIndex("TestId");

                    b.ToTable("TestSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Classroom", b =>
                {
                    b.HasOne("ExamBook.Entities.Space", "Space")
                        .WithMany("Classrooms")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.ClassroomSpeciality", b =>
                {
                    b.HasOne("ExamBook.Entities.Classroom", "Classroom")
                        .WithMany("ClassroomSpecialities")
                        .HasForeignKey("ClassroomId");

                    b.HasOne("ExamBook.Entities.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ExamBook.Entities.Course", b =>
                {
                    b.HasOne("ExamBook.Entities.Classroom", "Classroom")
                        .WithMany("Courses")
                        .HasForeignKey("ClassroomId");

                    b.HasOne("ExamBook.Entities.Space", "Space")
                        .WithMany("Courses")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseHour", b =>
                {
                    b.HasOne("ExamBook.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.Course", "Course")
                        .WithMany("CourseHours")
                        .HasForeignKey("CourseId");

                    b.HasOne("ExamBook.Entities.CourseTeacher", "CourseTeacher")
                        .WithMany("CourseHours")
                        .HasForeignKey("CourseTeacherId");

                    b.HasOne("ExamBook.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("CourseTeacher");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseSession", b =>
                {
                    b.HasOne("ExamBook.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.CourseHour", "CourseHour")
                        .WithMany("CourseSessions")
                        .HasForeignKey("CourseHourId");

                    b.HasOne("ExamBook.Entities.Course", "Course")
                        .WithMany("CourseSessions")
                        .HasForeignKey("CourseId");

                    b.HasOne("ExamBook.Entities.CourseTeacher", "CourseTeacher")
                        .WithMany("CourseSessions")
                        .HasForeignKey("CourseTeacherId");

                    b.HasOne("ExamBook.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("CourseHour");

                    b.Navigation("CourseTeacher");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseSpeciality", b =>
                {
                    b.HasOne("ExamBook.Entities.ClassroomSpeciality", "ClassroomSpeciality")
                        .WithMany()
                        .HasForeignKey("ClassroomSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.Course", "Course")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("CourseId");

                    b.Navigation("ClassroomSpeciality");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseTeacher", b =>
                {
                    b.HasOne("ExamBook.Entities.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId");

                    b.HasOne("ExamBook.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Course");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ExamBook.Entities.Examination", b =>
                {
                    b.HasOne("ExamBook.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("ExamBook.Entities.Space", "Space")
                        .WithMany("Examinations")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.ExaminationSpeciality", b =>
                {
                    b.HasOne("ExamBook.Entities.Examination", "Examination")
                        .WithMany()
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("ExamBook.Entities.Member", b =>
                {
                    b.HasOne("ExamBook.Entities.Space", "Space")
                        .WithMany("Members")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.Paper", b =>
                {
                    b.HasOne("ExamBook.Entities.Participant", "Participant")
                        .WithMany("Papers")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("ExamBook.Entities.TestGroup", null)
                        .WithMany("Papers")
                        .HasForeignKey("TestGroupId");

                    b.HasOne("ExamBook.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.TestSpeciality", "TestSpeciality")
                        .WithMany()
                        .HasForeignKey("TestSpecialityId");

                    b.Navigation("Participant");

                    b.Navigation("Test");

                    b.Navigation("TestSpeciality");
                });

            modelBuilder.Entity("ExamBook.Entities.PaperSpeciality", b =>
                {
                    b.HasOne("ExamBook.Entities.Paper", "Paper")
                        .WithMany("PaperSpecialities")
                        .HasForeignKey("PaperId");

                    b.HasOne("ExamBook.Entities.ParticipantSpeciality", "ParticipantSpeciality")
                        .WithMany()
                        .HasForeignKey("ParticipantSpecialityId");

                    b.HasOne("ExamBook.Entities.TestSpeciality", null)
                        .WithMany("PaperSpecialities")
                        .HasForeignKey("TestSpecialityId");

                    b.Navigation("Paper");

                    b.Navigation("ParticipantSpeciality");
                });

            modelBuilder.Entity("ExamBook.Entities.Participant", b =>
                {
                    b.HasOne("ExamBook.Entities.Examination", "Examination")
                        .WithMany("Participants")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.Student", "Student")
                        .WithMany("Participants")
                        .HasForeignKey("StudentId");

                    b.Navigation("Examination");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamBook.Entities.ParticipantSpeciality", b =>
                {
                    b.HasOne("ExamBook.Entities.ExaminationSpeciality", "ExaminationSpeciality")
                        .WithMany("ParticipantSpecialities")
                        .HasForeignKey("ExaminationSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.Participant", "Participant")
                        .WithMany("ParticipantSpecialities")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationSpeciality");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("ExamBook.Entities.Room", b =>
                {
                    b.HasOne("ExamBook.Entities.Space", "Space")
                        .WithMany("Rooms")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.Speciality", b =>
                {
                    b.HasOne("ExamBook.Entities.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ExamBook.Entities.Student", b =>
                {
                    b.HasOne("ExamBook.Entities.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("ExamBook.Entities.Test", b =>
                {
                    b.HasOne("ExamBook.Entities.Examination", "Examination")
                        .WithMany("Tests")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBook.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Examination");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ExamBook.Entities.TestGroup", b =>
                {
                    b.HasOne("ExamBook.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("ExamBook.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamBook.Entities.TestSpeciality", b =>
                {
                    b.HasOne("ExamBook.Entities.ExaminationSpeciality", "ExaminationSpeciality")
                        .WithMany()
                        .HasForeignKey("ExaminationSpecialityId");

                    b.HasOne("ExamBook.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationSpeciality");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamBook.Entities.Classroom", b =>
                {
                    b.Navigation("ClassroomSpecialities");

                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ExamBook.Entities.Course", b =>
                {
                    b.Navigation("CourseHours");

                    b.Navigation("CourseSessions");

                    b.Navigation("CourseSpecialities");

                    b.Navigation("CourseTeachers");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseHour", b =>
                {
                    b.Navigation("CourseSessions");
                });

            modelBuilder.Entity("ExamBook.Entities.CourseTeacher", b =>
                {
                    b.Navigation("CourseHours");

                    b.Navigation("CourseSessions");
                });

            modelBuilder.Entity("ExamBook.Entities.Examination", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamBook.Entities.ExaminationSpeciality", b =>
                {
                    b.Navigation("ParticipantSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Paper", b =>
                {
                    b.Navigation("PaperSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Participant", b =>
                {
                    b.Navigation("Papers");

                    b.Navigation("ParticipantSpecialities");
                });

            modelBuilder.Entity("ExamBook.Entities.Space", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("Courses");

                    b.Navigation("Examinations");

                    b.Navigation("Members");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ExamBook.Entities.Student", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ExamBook.Entities.TestGroup", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("ExamBook.Entities.TestSpeciality", b =>
                {
                    b.Navigation("PaperSpecialities");
                });
#pragma warning restore 612, 618
        }
    }
}
