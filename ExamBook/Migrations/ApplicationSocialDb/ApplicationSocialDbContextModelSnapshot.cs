// <auto-generated />
using System;
using ExamBook.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamBook.Migrations.ApplicationSocialDb
{
    [DbContext(typeof(ApplicationSocialDbContext))]
    partial class ApplicationSocialDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Social.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PictureId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThumbnailId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Social.Entities.AuthorSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorSubscriptions");
                });

            modelBuilder.Entity("Social.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("ParentPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentPostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Social.Entities.PostFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAudio")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGif")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPicture")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("PosterId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThumbId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostFiles");
                });

            modelBuilder.Entity("Social.Entities.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Social.Entities.Repost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ChildPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChildPostId");

                    b.HasIndex("PostId");

                    b.ToTable("Reposts");
                });

            modelBuilder.Entity("Social.Entities.AuthorSubscription", b =>
                {
                    b.HasOne("Social.Entities.Author", "Author")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Social.Entities.Post", b =>
                {
                    b.HasOne("Social.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Social.Entities.Post", "ParentPost")
                        .WithMany()
                        .HasForeignKey("ParentPostId");

                    b.Navigation("Author");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("Social.Entities.PostFile", b =>
                {
                    b.HasOne("Social.Entities.Post", "Post")
                        .WithMany("Files")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Social.Entities.Reaction", b =>
                {
                    b.HasOne("Social.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Social.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Social.Entities.Repost", b =>
                {
                    b.HasOne("Social.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Social.Entities.Post", "ChildPost")
                        .WithMany()
                        .HasForeignKey("ChildPostId");

                    b.HasOne("Social.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("Author");

                    b.Navigation("ChildPost");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Social.Entities.Author", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Social.Entities.Post", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
